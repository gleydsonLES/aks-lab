name: Apply AKS

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'

jobs:
  plan-dev:
    name: 'Terraform APPLY [Criando AKS]'
    runs-on: ubuntu-latest
    outputs:
      aks_cluster_name: ${{ steps.set_outputs.outputs.aks_cluster_name }}
      resource_group_name: ${{ steps.set_outputs.outputs.resource_group_name }}
    env:
      TF_WORKING_DIR: 'terraform'

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.60.0
          inlineScript: |
            az account show
            

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Debug Terraform Outputs
        run: terraform output

      - name: Coletando informações do AKS
        id: set_outputs
        run: |
          aks_cluster_name=$(terraform output -json | jq -r '.aks_cluster_name.value')
          resource_group_name=$(terraform output -json | jq -r '.resource_group_name.value')
          echo "::set-output name=aks_cluster_name::$aks_cluster_name"
          echo "::set-output name=resource_group_name::$resource_group_name" 

  kubectl-setup:
    name: 'Instalação do kubectl'
    needs: 
      - plan-dev
    runs-on: ubuntu-latest
    steps:

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Run basic AZ CLI command'
        run: az group list

      - uses: azure/setup-kubectl@v3
        name: Setup kubectl

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ needs.plan-dev.outputs.resource_group_name }}
          cluster-name: ${{ needs.plan-dev.outputs.aks_cluster_name }}
          admin: 'false'

      - name: Run kubectl
        run: |
          kubectl get pods -ALL