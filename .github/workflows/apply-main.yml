name: Apply AKS

on:
  push:
    branches:
      - main
    paths:
      - 'aks/**'

jobs:
  plan-dev:
    name: 'Terraform APPLY [Criando AKS]'
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.set_aks.outputs.aks_cluster_name }}
      output2: ${{ steps.set_aks.outputs.resource_group_name }}
    env:
      TF_WORKING_DIR: 'aks'


    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Coletando informações do AKS
        id: set_aks
        run: |
          CLUSTER_NAME=$(terraform output aks_cluster_name | sed 's/"//g')
          echo "::set-output name=aks_cluster_name::$CLUSTER_NAME"

          GROUP_NAME=$(terraform output resource_group_name | sed 's/"//g')
          echo "::set-output name=resource_group_name::$GROUP_NAME"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  kubectl-setup:
    name: 'Setup NGINX+CERT-MANAGER+APP'
    needs: 
      - plan-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Run basic AZ CLI command'
        run: az group list

      - uses: azure/setup-kubectl@v3
        name: Setup kubectl

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ needs.plan-dev.outputs.output2 }}
          cluster-name: ${{ needs.plan-dev.outputs.output1 }}
          admin: 'false'

      - name: Create NS
        run: |
          kubectl create namespace ingress
          kubectl create namespace cert-manager
          kubectl create namespace application

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Add ingress-nginx Helm Repo
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

      - name: Update Helm Repos
        run: |
          helm repo update

      - name: Export IP
        run: |
          export IP=$(az network public-ip list --query "[?starts_with(name, 'kubernetes')].{Name: name, PublicIP: ipAddress}" --output tsv | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")
          printenv | grep IP

      - name: Usar Helm para fazer deploy do  NGINX ingress controller
        run: |
          helm install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress \
          --set controller.replicaCount=1 \
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set controller.service.externalTrafficPolicy=Local \
          --set controller.service.loadBalancerIP=$IP

      - name: Desativar validacao de recurso do cert-manager
        run: |
          kubectl label namespace cert-manager cert-manager.io/disable-validation=true

      - name: Desativar validacao de recurso do cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
      
      - name: Instalar os CRDs 
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml

      - name: Instalar cert-manager helm charts
        run: |
          helm install cert-manager jetstack/cert-manager -n cert-manager --version v1.7.2

      - name: List files in GITHUB_WORKSPACE
        run: |
          echo "Listing files in $GITHUB_WORKSPACE"
          ls -lart $GITHUB_WORKSPACE

      - name: Apply CA Cluster Issuer
        run: |
          kubectl apply -f  ${{ github.workspace }}/cluster-issuer.yaml -n cert-manager

      - name: Apply Services
        run: |
          kubectl apply -f ${{ github.workspace }}/service/app1.yaml -n application
          kubectl apply -f ${{ github.workspace }}/service/app2.yaml -n application

      - name: Apply Deployment
        run: |
          kubectl apply -f ${{ github.workspace }}/deployment/deployment.yaml -n application
          kubectl apply -f ${{ github.workspace }}/deployment/deployment2.yaml -n application

      - name: Apply Ingress
        run: |
          kubectl apply -f ${{ github.workspace }}/ingress/ingress-app1.yaml -n application

      - name: Listar todas pods
        run: |
          kubectl get po -ALL
